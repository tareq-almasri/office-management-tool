{"version":3,"sources":["components/List.js","App.js","serviceWorker.js","index.js"],"names":["List","state","employee","name","dep","available","toggle","arr","arr2","slice","indexOf","Date","substring","concat","this","filter","x","final","style","padding","display","placeItems","Table","striped","bordered","hover","width","length","colSpan","height","paddingTop","position","left","top","color","backgroundColor","flexDirection","margin","map","key","Math","random","justifyContent","borderRadius","onClick","setState","prev","theOne","find","y","z","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78d601be.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport { Table } from \"react-bootstrap\";\n\nexport default class List extends Component {\n  state = {\n    employee: [\n      { name: \"Alex\", dep: \"Tech\", available: true },\n      { name: \"Bea\", dep: \"Project managment\", available: true },\n      { name: \"Carl\", dep: \"HR\", available: true },\n      {\n        name: \"Dasha\",\n        dep: \"Backend dev team\",\n        available: true\n      },\n      {\n        name: \"Eric\",\n        dep: \"Business development\",\n        available: true\n      },\n      {\n        name: \"Francesca\",\n        dep: \"Frontend dev team\",\n        available: true\n      },\n      {\n        name: \"Gabriella\",\n        dep: \"Online marketing\",\n        available: true\n      }\n    ],\n    toggle: \"Available\"\n  };\n\n  render() {\n    let arr = [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"];\n    let arr2 = arr\n      .slice(arr.indexOf(Date().substring(0, 3)))\n      .concat(arr.slice(0, arr.indexOf(Date().substring(0, 3))));\n      \n    let available = this.state.employee.filter(x => x.available === true);\n    let final = available\n      .concat(available)\n      .concat(available)\n      .concat(available)\n      .concat(available)\n      .concat(available)\n      .concat(available)\n      .concat(available)\n      .concat(available)\n      .concat(available)\n      .concat(available);\n\n    return (\n      <div style={{ padding: \"100px\", display: \"grid\", placeItems: \"center\" }}>\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th style={{ width: \"100px\" }}>Day</th>\n              <th style={{ width: \"200px\" }}>Open</th>\n              <th style={{ width: \"200px\" }}>Close</th>\n            </tr>\n          </thead>\n          <tbody>\n            {available.length === 0 ? (\n              <td colSpan=\"3\" style={{height: '245px', paddingTop: '120px'}}>No one is available!</td>\n            ) : (\n              <Fragment>\n                <tr>\n                  <td style={{ position: \"relative\" }}>\n                    <div\n                      style={{\n                        position: \"absolute\",\n                        left: \"0\",\n                        top: \"10px\",\n                        padding: \"0 4px\",\n                        color: \"#fff\",\n                        backgroundColor: \"red\"\n                      }}\n                    >\n                      Today\n                    </div>\n                    {arr2[0]}\n                  </td>\n                  <td>\n                    {final[0].name} / {final[0].dep}\n                  </td>\n                  <td>\n                    {final[1].name} / {final[1].dep}\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>{arr2[1]}</td>\n                  <td>\n                    {final[2].name} / {final[2].dep}\n                  </td>\n                  <td>\n                    {final[3].name} / {final[3].dep}\n                  </td>\n                </tr>\n\n                <tr>\n                  <td>{arr2[2]}</td>\n                  <td>\n                    {final[4].name} / {final[4].dep}\n                  </td>\n                  <td>\n                    {final[5].name} / {final[5].dep}\n                  </td>\n                </tr>\n                <tr>\n                  <td>{arr2[3]}</td>\n                  <td>\n                    {final[6].name} / {final[6].dep}\n                  </td>\n                  <td>\n                    {final[7].name} / {final[7].dep}\n                  </td>\n                </tr>\n                <tr>\n                  <td>{arr2[4]}</td>\n                  <td>\n                    {final[8].name} / {final[8].dep}\n                  </td>\n                  <td>\n                    {final[9].name} / {final[9].dep}\n                  </td>\n                </tr>\n              </Fragment>\n            )}\n          </tbody>\n        </Table>\n\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            width: \"400px\",\n            margin: \"30px\"\n          }}\n        >\n          {this.state.employee.map(x => (\n            <div\n              key={Math.random()}\n              style={{ display: \"flex\", justifyContent: \"space-between\" }}\n            >\n              <div style={{ width: \"100px\" }}>{x.name}</div>\n              <button\n                style={{\n                  color: \"#fff\",\n                  borderRadius: \"8px\",\n                  backgroundColor: x.available ? \"green\" : \"red\"\n                }}\n                onClick={() => {\n                  this.setState(prev => {\n                    let employee = [...prev.employee];\n                    let theOne = employee.find(y => y.name === x.name);\n                    theOne.available = !theOne.available;\n                    return {\n                      employee: employee.map(z =>\n                        z.name === theOne.name ? theOne : z\n                      )\n                    };\n                  });\n                }}\n              >\n                {x.available ? \"Available\" : \"Not Available\"}\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport List from './components/List';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\"; \nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}